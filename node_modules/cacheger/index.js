const ms = require('ms');

class Cacheger {

    constructor(cacheName = 'cache', defaultOptions = {}, setDates = true) {
        this.cacheName = cacheName;
        this[cacheName] = new Map();
        this.defaultOptions = defaultOptions ?? {};
        this.setDates = setDates;
        this.addDefaultOption = (OptionName, OptionContent) => {
            this.defaultOptions[OptionName] = OptionContent;
        };
        this.removeDefaultOption = (OptionName) => {
            delete this.defaultOptions[OptionName];
        }
    };

    set(identificator, object = {}, withDefaultOptions = true) {
        if(this.setDates && !object.Date) object.Date = Date.now();
        if(withDefaultOptions) {
            Object.keys(this.defaultOptions).forEach(DefaultOption => {
                if(typeof object[DefaultOption] != 'boolean' && !object[DefaultOption]) object[DefaultOption] = this.defaultOptions[DefaultOption];
            });
        }
        this[this.cacheName].set(identificator, object);
    }

    delete(identificator) {
        if(this[this.cacheName].has(identificator)) this[this.cacheName].delete(identificator);
    }

    get(identificator, CreateAuto = false) {
        if(!this[this.cacheName].has(identificator) && CreateAuto) this.set(identificator, {});
        return this[this.cacheName].get(identificator);
    }

    purge(DateToPurge = 120000) {
        if(typeof DateToPurge != 'number') DateToPurge = ms(DateToPurge);

        this[this.cacheName].forEach(x => {
            if(typeof x === 'object' && x.Date && Date.now() > x.Date + DateToPurge) this.delete(x.id);
        });
    }

    purgeAll() {
        this[this.cacheName].clear();
    }

    has(identificator) {
        return this[this.cacheName].has(identificator);
    }

    update(identificator, newObject = {}, withDefaultOptions = true) {
        this.delete(identificator);

        if(this.setDates && !newObject.Date) {
            newObject.Date = Date.now();
            newObject.LastUpdated = Date.now();
        }

        if(withDefaultOptions) {
            Object.keys(this.defaultOptions).forEach(DefaultOption => {
                if(typeof newObject[DefaultOption] != 'boolean' && !newObject[DefaultOption]) newObject[DefaultOption] = this.defaultOptions[DefaultOption];
            });
        }
        this[this.cacheName].set(identificator, newObject);
    }
}

module.exports = Cacheger