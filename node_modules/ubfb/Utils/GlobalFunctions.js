const fs = require('fs');
const path = require('path');
const Fetch = require('./Fetch');

module.exports = {
    getAllLocalUsers: async (config) => {
        let all = [];

        await fs.readdirSync(path.join(__dirname, '../Cache/Malicious/Users/')).map(async User => {
            if(config.Functions.autoConvertJSON) all.push(JSON.parse(await fs.readFileSync(path.join(__dirname, '../Cache/Malicious/Users/' + User), 'utf-8')));
            else all.push(await fs.readFileSync(path.join(__dirname, '../Cache/Malicious/Users/' + User), 'utf-8'));
        });

        if(config.Functions.autoConvertBuffers) {

            for(let x = 0; x < all.length; x++) {
                if(!all[x].localUser) all[x].proof = await Buffer.from(all[x].proof, 'base64');

                await all[x].proofs.forEach(async proof => {
                    if(!all[x].localUser) all[x].proofs[all[x].proof.indexOf(proof)] = await Buffer.from(proof, 'base64');
                });
            };

        }

        return all;
    },
    getAllLocalLinks: async (config) => {
        let all = [];

        await fs.readdirSync(path.join(__dirname, '../Cache/Malicious/Links/')).map(async Link => {
            if(config.Functions.autoConvertJSON) all.push(JSON.parse(await fs.readFileSync(path.join(__dirname, '../Cache/Malicious/Links/' + Link), 'utf-8')));
            else all.push(await fs.readFileSync(path.join(__dirname, '../Cache/Malicious/Links/' + Link), 'utf-8'));
        });

        return all.map(Link => {
            if(Link.domain.includes('_')) Link.domain = Link.domain.split('_').join('/');
            
            return Link;
        });
    },
    localSearch: async (value, content, config, isUser = true) => {
        if(value.includes(':')) value = value.split(':');

        let all = [];
        if(isUser) {
            if(typeof value != 'string') {
                if(value.length === 3) (await (await module.exports.getAllLocalUsers(config)).filter(User => User[value[0]][value[1]][value[2]] === content).map(x => all.push(x)));
                else if(value.length === 2) (await (await module.exports.getAllLocalUsers(config)).filter(User => User[value[0]][value[1]] === content).map(x => all.push(x)));
            }else (await (await module.exports.getAllLocalUsers(config)).filter(User => User[value] === content).map(x => all.push(x)));
        }else {
            if(typeof value != 'string') {
                if(value.length === 3) (await (await module.exports.getAllLocalLinks(config)).filter(Link => Link[value[0]][value[1]][value[2]] === content).map(x => all.push(x)));
                else if(value.length === 2) (await (await module.exports.getAllLocalLinks(config)).filter(Link => Link[value[0]][value[1]] === content).map(x => all.push(x)));
            }else (await (await module.exports.getAllLocalLinks(config)).filter(Link => Link[value] === content).map(x => all.push(x))); 
        };

        return all.length > 0? all.length == 1? all[0] : all : undefined;
    },
    globalSearch: async (route, content, isUser = true) => {
        return await Fetch.get(`${isUser? 'users' : 'links'}/search/${route}/${content}`);
    }
};